<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Game Display</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #000;
            color: white;
            font-family: Arial, sans-serif;
        }
        #gameCanvas {
            background-color: #111;
            border: 2px solid white;
        }
        #score {
            position: absolute;
            top: 20px;
            color: white;
            font-size: 20px;
        }
        #output {
            border: 1px solid #ccc;
            padding: 10px;
            background-color: #f9f9f9;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>Heyo!</h1>
    <div id="score">Left: 0 | Right: 0</div>
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    <pre id="output"></pre>
    <button id="runFunctionBtn">Run backend Pong</button>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const context = canvas.getContext('2d');
        const scoreBoard = document.getElementById('score');
        //const outputContainer = document.getElementById('output');

        const paddleWidth = 10;
        const paddleHeight = 100;
        const ballSize = 10;

        const normalize = (value, max, canvasSize) => (value / max) * canvasSize;

        function updateGameState(frame) {
            // Parse frame: nonce, paddleL.y, paddleR.y, ball.x, ball.y, Lscore, Rscore
            const [nonce, paddleL_Y, paddleR_Y, ballX, ballY, Lscore, Rscore] = frame.split(' ').map(Number);

            const maxX = 1000;
            const maxY = 500;

            const normalizedPaddleL_Y = normalize(paddleL_Y, maxY, canvas.height);
            const normalizedPaddleR_Y = normalize(paddleR_Y, maxY, canvas.height);
            const normalizedBallX = normalize(ballX, maxX, canvas.width);
            const normalizedBallY = normalize(ballY, maxY, canvas.height);

            // Clear the canvas
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.fillStyle = 'white';

            // Draw paddles
            context.fillRect(10, normalizedPaddleL_Y, paddleWidth, paddleHeight); // Left paddle
            context.fillRect(canvas.width - 20, normalizedPaddleR_Y, paddleWidth, paddleHeight); // Right paddle

            // Draw ball
            context.beginPath();
            context.arc(normalizedBallX, normalizedBallY, ballSize / 2, 0, Math.PI * 2);
            context.fill();

            // Update score
            scoreBoard.textContent = `Left: ${Lscore} | Right: ${Rscore}`;
        }

        // WebSocket setup
        let url = `ws://${window.location.host}/Pong/Pong/ws/socket-server/`;
        const testSocket = new WebSocket(url);

        // WebSocket message handler
        testSocket.onmessage = function(e) {
            const frame = e.data.trim();
            //outputContainer.textContent += frame + "\n"; // Append received data
            updateGameState(frame); // Update the game state
        };

        let player1Action = 0; // 0: Not Moving, 1: Moving Up, 2: Moving Down
        let player2Action = 0; // 0: Not Moving, 1: Moving Up, 2: Moving Down
		playerActions = [0,0]

        // Handle keydown events for player inputs
        document.addEventListener('keydown', function(event) {
            if (event.key === 'w') {
				playerActions[0] = 1;
                testSocket.send(playerActions); // Player 1 moving up
            } else if (event.key === 's') { 
				playerActions[0] = 2;
                testSocket.send(playerActions); // Player 1 moving down
            } else if (event.key === 'ArrowUp') {
				playerActions[1] = 1;
                testSocket.send(playerActions); // Player 2 moving up
            } else if (event.key === 'ArrowDown') {
				playerActions[1] = 2;
				testSocket.send(playerActions); // Player 2 moving down
            }
        });

        // Handle keyup events to stop movement
        document.addEventListener('keyup', function(event) {
            if (event.key === 'w' || event.key === 's') {
				playerActions[0] = 0;
                testSocket.send(playerActions); // Player 1 stops moving
            } else if (event.key === 'ArrowUp' || event.key === 'ArrowDown') {
				playerActions[1] = 0;
                testSocket.send(playerActions); // Player 2 stops moving
            }
        });

        // Button click to trigger a function on the backend
        document.getElementById('runFunctionBtn').addEventListener('click', function() {
            const message = 'PONG'; // Example message to trigger backend functionality
            testSocket.send(message);
        });
    </script>
</body>
</html>
